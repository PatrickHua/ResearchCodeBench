yaml_template: |
  mask_file_path: example.py  # the file where your core code is.
  # TODO1: replace example.py with the file name of your core code.
  # TODO2: wrap the core code snippets in <paper2code name="snippet_name">...</paper2code name="snippet_name"> tags.
  # Multiple snippets can be wrapped in a single <paper2code>...</paper2code> tag with a unique name. See pset/DyT/dynamic_tanh.py for an example.
  # When benchmarking, a chosen snippet will be replaced with a llm-generated code snippet each time we run the test.

  context_file_paths:  # these files will be added to the context of the llm. 
    - module/example.py  # other files that are used in the code
    - util/visualize.py  # other contextual files that are needed for implementing the core code.
    # TODO3: add other contextual files that are needed for implementing the core code. Write null if the mask file is self-contained.
    # DO NOT include files that might leak information about the core code.

  test_entry_point: paper2code_test.py  # will run this entry point script to check if the code is correct.
  # TODO4: Complete the test script for the core code.
  # We encourage you use unittest for testing. However, any format is acceptable as long as 
  # 1. When run python paper2code_test.py successfully means any regenerated code snippet is correct.
  # 2. Raises an error or break the execution if the code is incorrect.
  # Note:
  # 1. The test should be able to run with cpu only. If you have trouble running the test with cpu only, please let us know.
  # 2. Using AI to generate test is ok, as long as it is correct with good coverage.
  # 3. A simple way to test is by checking if the output is as expected against a reference implementation or some expected outputs stored in the repo.

  paper_tex: paper2code_paper.tex  # the tex file for the paper.
  # TODO5: Check if the automatically downloaded and merged latex paper is correct.

next_steps: |
  [bold]Next Steps:[/bold]

  1. Update [cyan]paper2code.yaml[/cyan] with correct file paths
  2. Create [cyan]paper2code_test.py[/cyan]
     • Use unittest for testing
     • Verify generated code output
     • Ensure CPU-only compatibility
  3. Annotate the core code with snippets
     • Use [cyan]# <paper2code name="snippet_name">[/cyan] format
     • Create varied snippet sizes
     • Keep names concise and informative
  4. Clean up repository
     • Update all configuration files
     • Remove unnecessary files (__pycache__, .git/, etc.)
     • Keep only test-relevant files
     • Verify repository size
  5. Run final test and verify everything works

instructions: |
  [bold]Paper2Code Setup Instructions:[/bold]

  Please go to paper2code.yaml in the downloaded repository and complete all the TODOs.